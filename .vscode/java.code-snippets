{
  "java-mem-assistant": {
    "body": [
      "Assistant assistant = AiServices.builder(Assistant.class)",
      "    .streamingChatLanguageModel(streamingChatModel)",
      "    .chatMemory(chatMemory)",
      ".build();",
      ""
    ],
    "description": "",
    "prefix": "java-05-mem-assistant",
    "scope": "java"
  },
  "java-mem-dependencies": {
    "body": [
      "\u003cdependency\u003e",
      "  \u003cgroupId\u003edev.langchain4j\u003c/groupId\u003e",
      "  \u003cartifactId\u003elangchain4j\u003c/artifactId\u003e",
      "  \u003cversion\u003e${langchain4j.version}\u003c/version\u003e",
      "\u003c/dependency\u003e",
      "",
      "\u003cdependency\u003e",
      "  \u003cgroupId\u003edev.langchain4j\u003c/groupId\u003e",
      "  \u003cartifactId\u003elangchain4j-mistral-ai\u003c/artifactId\u003e",
      "  \u003cversion\u003e${langchain4j.version}\u003c/version\u003e",
      "\u003c/dependency\u003e",
      ""
    ],
    "description": "",
    "prefix": "java-01-mem-dependencies",
    "scope": "xml"
  },
  "java-mem-interface": {
    "body": [
      "interface Assistant {",
      "  TokenStream chat(String message);",
      "}",
      ""
    ],
    "description": "",
    "prefix": "java-02-mem-interface",
    "scope": "java"
  },
  "java-mem-memory": {
    "body": [
      "ChatMemory chatMemory = MessageWindowChatMemory.withMaxMessages(10);",
      ""
    ],
    "description": "",
    "prefix": "java-04-mem-memory",
    "scope": "java"
  },
  "java-mem-model": {
    "body": [
      "MistralAiStreamingChatModel streamingChatModel = MistralAiStreamingChatModel.builder()",
      "        .apiKey(System.getenv(\"OVH_AI_ENDPOINTS_ACCESS_TOKEN\"))",
      "        .modelName(System.getenv(\"OVH_AI_ENDPOINTS_MODEL_NAME\"))",
      "        .baseUrl(",
      "                System.getenv(\"OVH_AI_ENDPOINTS_MODEL_URL\"))",
      "        .maxTokens(512)",
      "        .build();",
      ""
    ],
    "description": "",
    "prefix": "java-03-mem-model",
    "scope": "java"
  },
  "java-mem-prompt": {
    "body": [
      "_LOG.info(\"ðŸ’¬: My name is StÃ©phane.\\n\");",
      "TokenStream tokenStream = assistant.chat(\"My name is StÃ©phane.\");",
      "_LOG.info(\"ðŸ¤–: \");",
      "tokenStream",
      "    .onNext(_LOG::info)",
      "    .onComplete(token -\u003e {",
      "      _LOG.info(\"\\nðŸ’¬: Do you remember what is my name?\\n\");",
      "      _LOG.info(\"ðŸ¤–: \");",
      "      assistant.chat(\"Do you remember what is my name?\")",
      "          .onNext(_LOG::info)",
      "          .onError(Throwable::printStackTrace).start();",
      "    })",
      "    .onError(Throwable::printStackTrace).start();",
      ""
    ],
    "description": "",
    "prefix": "java-06-mem-prompt",
    "scope": "java"
  },
  "java-rag-assistant": {
    "body": [
      "Assistant assistant = AiServices",
      "  .builder(Assistant.class)",
      "  .streamingChatLanguageModel(streamingChatModel)",
      "  .contentRetriever(contentRetriever)",
      "  .build();",
      ""
    ],
    "description": "",
    "prefix": "java-12-rag-assistant",
    "scope": "java"
  },
  "java-rag-chunk": {
    "body": [
      "// Load the document and split it into chunks",
      "DocumentParser documentParser = new TextDocumentParser();",
      "Document document = loadDocument(",
      "  RAGStreamingChatbot.class.getResource(\"/rag-files/content.txt\").getFile(),",
      "  documentParser",
      ");",
      "DocumentSplitter splitter = DocumentSplitters.recursive(300, 0);",
      "",
      "List\u003cTextSegment\u003e segments = splitter.split(document);",
      ""
    ],
    "description": "",
    "prefix": "java-08-rag-chunk",
    "scope": "java"
  },
  "java-rag-dependency": {
    "body": [
      "\u003cdependency\u003e",
      "  \u003cgroupId\u003edev.langchain4j\u003c/groupId\u003e",
      "  \u003cartifactId\u003elangchain4j-ovh-ai\u003c/artifactId\u003e",
      "  \u003cversion\u003e${langchain4j.version}\u003c/version\u003e",
      "\u003c/dependency\u003e",
      ""
    ],
    "description": "",
    "prefix": "java-07-rag-dependency",
    "scope": "xml"
  },
  "java-rag-embed": {
    "body": [
      "// Do the embeddings and store them in an embedding store",
      "EmbeddingModel embeddingModel = OvhAiEmbeddingModel.builder()",
      "        .apiKey(OVHCLOUD_API_KEY)",
      "        .baseUrl(System.getenv(\"OVH_AI_ENDPOINTS_EMBEDDING_MODEL_URL\"))",
      "        .build();",
      "List\u003cEmbedding\u003e embeddings = embeddingModel.embedAll(segments).content();",
      ""
    ],
    "description": "",
    "prefix": "java-09-rag-embed",
    "scope": "java"
  },
  "java-rag-model": {
    "body": [
      "MistralAiStreamingChatModel streamingChatModel = MistralAiStreamingChatModel.builder()",
      "        .apiKey(OVHCLOUD_API_KEY)",
      "        .modelName(System.getenv(\"OVH_AI_ENDPOINTS_MODEL_NAME\"))",
      "        .baseUrl(",
      "                System.getenv(\"OVH_AI_ENDPOINTS_MODEL_URL\")",
      "        )",
      "        .maxTokens(512)",
      "        .build();",
      ""
    ],
    "description": "",
    "prefix": "java-11-rag-model",
    "scope": "java"
  },
  "java-rag-prompt": {
    "body": [
      "_LOG.info(\"\\nðŸ’¬: What is AI Endpoints?\\n\");",
      "",
      "TokenStream tokenStream = assistant.chat(\"Can you explain me what is AI Endpoints?\");",
      "_LOG.info(\"ðŸ¤–: \");",
      "tokenStream",
      "    .onNext(_LOG::info)",
      "    .onError(Throwable::printStackTrace)",
      "    .start();",
      ""
    ],
    "description": "",
    "prefix": "java-13-rag-prompt",
    "scope": "java"
  },
  "java-rag-store": {
    "body": [
      "EmbeddingStore\u003cTextSegment\u003e embeddingStore = new InMemoryEmbeddingStore\u003c\u003e();",
      "embeddingStore.addAll(embeddings, segments);",
      "ContentRetriever contentRetriever = EmbeddingStoreContentRetriever.builder()",
      "  .embeddingStore(embeddingStore)",
      "  .embeddingModel(embeddingModel)",
      "  .maxResults(5)",
      "  .minScore(0.9)",
      ".build();",
      ""
    ],
    "description": "",
    "prefix": "java-10-rag-store",
    "scope": "java"
  },
  "java-sentiment-dependency": {
    "body": [
      "\u003cdependency\u003e",
      "  \u003cgroupId\u003efr.wilda.ai\u003c/groupId\u003e",
      "  \u003cartifactId\u003ejava-ai-toolkit\u003c/artifactId\u003e",
      "  \u003cversion\u003e1.0.0\u003c/version\u003e",
      "\u003c/dependency\u003e",
      ""
    ],
    "description": "",
    "prefix": "java-14-sentiment-dependency",
    "scope": "xml"
  },
  "java-sentiment-display": {
    "body": [
      "// Print the response status code and body",
      "_LOG.debug(\"Status code: \" + response.statusCode());",
      "_LOG.debug(\"Response body: \" + response.body());",
      "_LOG.info(\"Emotion: \" + responseObject.toEmoji());",
      ""
    ],
    "description": "",
    "prefix": "java-19-sentiment-display",
    "scope": "java"
  },
  "java-sentiment-http": {
    "body": [
      "// Create a HTTP client",
      "HttpClient client = HttpClient.newHttpClient();",
      ""
    ],
    "description": "",
    "prefix": "java-15-sentiment-http",
    "scope": "java"
  },
  "java-sentiment-mapper": {
    "body": [
      "// Deserialize the response to a Java object using Jackson",
      "ObjectMapper objectMapper = new ObjectMapper();",
      "Emotion responseObject = objectMapper.readValue(response.body(), Emotion.class);",
      ""
    ],
    "description": "",
    "prefix": "java-18-sentiment-mapper",
    "scope": "java"
  },
  "java-sentiment-request": {
    "body": [
      "// Create a request builder",
      "HttpRequest request = HttpRequest.newBuilder()",
      "        .uri(URI.create(System.getenv(\"OVH_AI_ENDPOINTS_SENTIMENT_MODEL_URL\")))",
      "        .POST(HttpRequest.BodyPublishers.ofString(\"I love Java\"))",
      "        .header(\"Content-Type\", \"application/json\")",
      "        .header(\"Authorization\", \"Bearer \" + System.getenv(\"OVH_AI_ENDPOINTS_ACCESS_TOKEN\"))",
      "        .build();",
      ""
    ],
    "description": "",
    "prefix": "java-16-sentiment-request",
    "scope": "java"
  },
  "java-sentiment-response": {
    "body": [
      "// Send the request and get the response",
      "HttpResponse\u003cString\u003e response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      ""
    ],
    "description": "",
    "prefix": "java-17-sentiment-response",
    "scope": "java"
  },
  "quarkus-ai-ai-service": {
    "body": [
      "@SessionScoped",
      "@RegisterAiService(chatMemoryProviderSupplier = RegisterAiService.NoChatMemoryProviderSupplier.class)",
      ""
    ],
    "description": "",
    "prefix": "quarkus-02-ai-ai-service",
    "scope": "java"
  },
  "quarkus-ai-langchain4j": {
    "body": [
      "quarkus.langchain4j.mistralai.base-url=\\${OVH_AI_ENDPOINTS_MODEL_URL}",
      "quarkus.langchain4j.mistralai.api-key=\\${OVH_AI_ENDPOINTS_ACCESS_TOKEN}",
      "quarkus.langchain4j.mistralai.chat-model.max-tokens=512",
      "quarkus.langchain4j.mistralai.chat-model.model-name=\\${OVH_AI_ENDPOINTS_MODEL_NAME}",
      "quarkus.langchain4j.mistralai.log-requests=false",
      "quarkus.langchain4j.mistralai.log-responses=true",
      "quarkus.langchain4j.mistralai.chat-model.temperature=0.2",
      ""
    ],
    "description": "",
    "prefix": "quarkus-01-ai-langchain4j",
    "scope": ""
  },
  "quarkus-ai-prompt": {
    "body": [
      "@SystemMessage(\"You are a virtual assistant and your name is JARVIS.\")",
      "@UserMessage(\"Answer as best possible to the following question: {question}. The answer must be in a style of a virtual assistant.\")",
      "Multi\u003cString\u003e askAQuestion(String question);",
      ""
    ],
    "description": "",
    "prefix": "quarkus-03-ai-prompt",
    "scope": "java"
  },
  "quarkus-websocket": {
    "body": [
      "@WebSocket(path = \"/jarvis\")",
      ""
    ],
    "description": "",
    "prefix": "quarkus-04-websocket",
    "scope": "java"
  },
  "quarkus-ws-cors": {
    "body": [
      "# Disable CORS",
      "quarkus.http.cors=true",
      "%dev.quarkus.http.cors.origins=/.*/"
    ],
    "description": "",
    "prefix": "quarkus-07-ws-cors",
    "scope": ""
  },
  "quarkus-ws-inject-service": {
    "body": [
      "@Inject",
      "AIEndpointService aiEndpointService;",
      ""
    ],
    "description": "",
    "prefix": "quarkus-05-ws-inject-service",
    "scope": "java"
  },
  "quarkus-ws-onMessage": {
    "body": [
      "return aiEndpointService.askAQuestion(message)",
      "    .onItem()",
      "    .call(i -\u003e Uni.createFrom()",
      "        .nullItem()",
      "        .onItem()",
      "        .delayIt()",
      "        .by(Duration.ofMillis(200)));",
      ""
    ],
    "description": "",
    "prefix": "quarkus-06-ws-onMessage",
    "scope": "java"
  }
}